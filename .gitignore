# Never check in binary files!
*.h5
*.bz2
*.gz
*.png

# Ignore autogenerated documentation
doc/lib/*.rst
doc/*.rst.inc
doc/releaseinfo.json
doc/tech_ref_literature.rst
doc/tech_ref_functionals.rst
doc/doxyxml
doc/doxygen_warnings.log
doc/user_download_and_install_linux.rst
doc/user_download_and_install_mac.rst
doc/user_download_and_install_windows.rst
doc/tech_dev_git.rst

# Ignore (in-place) build results
cext.cpp
cext.so
*.pyc
build
MANIFEST
doc/_build

# Ignore compiled dependencies
depends/*.*

# Ignore eclipse files
.settings
.pydevproject
.project

# Ignore vi(m) swap files
*.swp

# Ignore user configuration for libraries
setup.cfg

# Ignore mac .DS_Store
.DS_Store

# Ignore testing output
.coverage
qaworkdir

# Ignore Pycharm
.idea
record.tx
*.egg-info/

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Fortran extensions
*.o
*.mod

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

_version.py
